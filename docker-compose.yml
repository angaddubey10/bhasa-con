version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: bhasaconnect_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: bhasaconnect
      POSTGRES_USER: bhasaconnect_user
      POSTGRES_PASSWORD: your_secure_password_here
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bhasaconnect_user -d bhasaconnect"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bhasaconnect_backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://bhasaconnect_user:your_secure_password_here@db:5432/bhasaconnect
      
      # JWT
      SECRET_KEY: your_jwt_secret_key_here_make_it_very_long_and_random
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # Cloudinary (replace with your credentials)
      CLOUDINARY_CLOUD_NAME: your_cloudinary_cloud_name
      CLOUDINARY_API_KEY: your_cloudinary_api_key
      CLOUDINARY_API_SECRET: your_cloudinary_api_secret
      
      # Environment
      ENVIRONMENT: development
      DEBUG: "true"
      
      # CORS
      CORS_ORIGINS: "http://localhost:3000,http://localhost:80,http://frontend:80"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    ports:
      - "8000:8000"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Starting server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bhasaconnect_frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:8000
      VITE_CLOUDINARY_CLOUD_NAME: your_cloudinary_cloud_name
    ports:
      - "80:80"
      - "3000:80"  # Alternative port mapping
    networks:
      - app-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis (for caching and sessions - optional)
  redis:
    image: redis:7-alpine
    container_name: bhasaconnect_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
